""" Example demonstrates how to create and use Notifications
with the NotificationManager.show_notification or the Notification widget.
"""
from enamlnative.widgets.api import *
from enamlnative.android.api import NotificationManager

CHANNEL_ID = "John Doe"


enamldef ContentView(Flexbox): view:
    flex_direction = "column"
    async func create_channel():
        channel = await NotificationManager.create_channel(CHANNEL_ID, "Messages")
        print(f"Created {channel}")

    activated:: app.deferred_call(create_channel)

    async func show_notification():
        result = await NotificationManager.show_notification(CHANNEL_ID,
              title="John Doe", text="Hello world!", color="#F00")
        print(f'Show notification: {result}')

    Button:
        text = "Show basic notification"
        clicked :: app.deferred_call(show_notification)
    Button:
        text = "Show progress notification"
        clicked ::
            pn.show = True
            # Simulate progress
            for i in range(10):
                app.timed_call(i*1000, lambda v=pn, i=i:setattr(v, 'progress', i*10))
            app.timed_call(11000, lambda v=pn: setattr(v, 'show', False))

    Notification: pn:
        channel_id = CHANNEL_ID
        title = "Picture download"
        text << "Download in progress {}%".format(self.progress)
        color = "#bac"
        show_progress = True
        progress = 0 # Initial progress must be zero then incremented
        settings = {"ongoing":True}

    async func show_action_notification():
        # Must save a ref when using it this way or the buttons won't work
        self.ref = await NotificationManager.show_notification(
            CHANNEL_ID,
            title="Good morning!",
            text="Wake up you lazy bum!",
            actions=[
                ("@drawable/ic_snooze", "SNOOZE", btn.on_snooze),
            ]
        )

    Button: btn:
        text = "Show notification with actions"
        attr ref
        func on_snooze(intent):
            app.show_toast("Snooze clicked!")
        clicked :: app.deferred_call(show_action_notification)
