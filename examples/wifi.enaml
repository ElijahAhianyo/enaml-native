from enamlnative.core.api import *
from enamlnative.widgets.api import *
from enamlnative.android.api import WifiManager
from enaml.application import deferred_call


enamldef ContentView(Flexbox): view:
    flex_direction = "column"
    attr networks = []
    attr scanning = False
    attr wifi_enabled = False
    attr wifi_info = None
    attr dhcp_info = None
    activated :: deferred_call(start)

    async func start():
        try:
            self.wifi_enabled = await WifiManager.is_wifi_enabled()
        except RuntimeError as e:
            app.show_toast(f'{e}')

    async func start_scan():
        self.scanning = True
        try:
            self.networks = await WifiManager.get_networks()
        except RuntimeError as e:
            app.show_toast(f'{e}')
        finally:
            self.scanning = False

    async func get_connection_info():
        self.wifi_info = await WifiManager.get_connection_info()

    async func get_dhcp_info():
        self.dhcp_info = await WifiManager.get_dhcp_info()

    async func toggle_wifi():
        self.wifi_enabled = await WifiManager.set_wifi_enabled(not wifi_enabled)


    async func connect_wifi():
        await WifiManager.connect(ssid=dialog.ssid, key=pwd.text)
        dialog.show = True

    Toolbar:
        height = 100
        background_color = "#bca"
        Flexbox:
            justify_content = "space_between"
            Button:
                flat = True
                text = "Scan"
                clicked  :: deferred_call(start_scan)
            Button:
                flat = True
                text = "Conn"
                clicked  :: deferred_call(get_connection_info)

            Button:
                flat = True
                text = "DHCP"
                clicked  :: deferred_call(get_dhcp_info)

            Button:
                flat = True
                text << "Disable" if wifi_enabled else "Enable"
                clicked  :: deferred_call(toggle_wifi)

    Flexbox:
        flex_direction = 'column'
        ScrollView:
            Flexbox:
                flex_direction = 'column'
                TextView:
                    text << "Connection info:\n{}".format(view.wifi_info)
                TextView:
                    text << "DHCP info:\n{}".format(view.dhcp_info)
                TextView:
                    text = "Scan Results:"
                Conditional:
                    condition << scanning
                    ActivityIndicator:
                        pass
                Looper:
                    iterable << networks if networks is not None else []
                    Flexbox:
                        attr connecting = False
                        attr connected = False
                        clickable = True
                        clicked ::
                            dialog.ssid = loop_item['ssid']
                            dialog.show = True
                        TextView:
                            padding = (10, 20, 10, 20)
                            text = "{}".format(loop_item)
        Dialog: dialog:
            attr ssid = ""
            Flexbox:
                padding = (20, 20, 20, 5)
                flex_direction = "column"
                justify_content = "space_between"
                attr show_password = False
                TextView:
                    text << ssid
                EditText: pwd:
                    placeholder = "Key"
                    input_type << ("text_visible_password"
                                    if show_password else "text_password")
                CheckBox:
                    text = "Show password"
                    checked := show_password
                Flexbox:
                    justify_content = "flex_end"
                    Button:
                        flat = True
                        text = "Cancel"
                        clicked :: dialog.show = False
                    Button:
                        flat = True
                        text = "Connect"
                        clicked :: deferred_call(connect_wifi)



