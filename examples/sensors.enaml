# -*- coding: utf-8 -*-
"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the MIT License.

The full license is in the file LICENSE, distributed with this software.

Created on May 20, 2017

 
"""
from enamlnative.widgets.api import *
from enaml.core.api import Conditional, Looper
from enamlnative.android.api import SensorManager, Sensor
from enaml.application import deferred_call


enamldef ContentView(ScrollView): view:
    attr manager: SensorManager
    attr sensor: Sensor
    attr event
    attr sensor_type = 'TYPE_ACCELEROMETER'
    attr sensor_delay = 'SENSOR_DELAY_NORMAL'

    deactivated ::
        if sensor is not None:
            sensor.stop()

    func on_sensor_changed(data):
        view.event = data

    async func load_manager():
        self.manager = await SensorManager.get()

    async func load_sensor():
        sensor_type = getattr(Sensor, view.sensor_type)
        self.sensor = await Sensor.get(sensor_type)

    Flexbox:
        flex_direction = 'column'
        Button:
            text = "Get manager"
            clicked :: deferred_call(load_manager)

        TextView:
            text = "Sensor Type"
        Spinner:
            items = [v for v in dir(Sensor) if v.startswith("TYPE_")]
            selected << self.items.index(view.sensor_type)
            selected :: view.sensor_type = self.items[change['value']]

        TextView:
            text = "Sensor Delay"
        Spinner:
            items = [v for v in dir(Sensor) if v.startswith("SENSOR_DELAY_")]
            selected << self.items.index(view.sensor_delay)
            selected :: view.sensor_delay = self.items[change['value']]

        Button:
            text = "Get sensor"
            clicked :: deferred_call(load_sensor)

        Button:
            text = "Start"
            clicked::
                # Hard way
                #sensor.onSensorChanged.connect(on_sensor_changed)
                #manager.registerListener(sensor.getId(), sensor, Sensor.SENSOR_DELAY_NORMAL)
                if sensor is not None:
                    sensor.start(on_sensor_changed, getattr(Sensor, view.sensor_delay))
        Button:
            text = "Stop"
            clicked::
                # Hard way
                #manager.unregisterListener(sensor.getId(), sensor)
                if sensor is not None:
                    sensor.stop()
        TextView:
            text << f"Manager: {manager}"
        TextView:
            text << f"Sensor: {sensor}"
        TextView:
            text << f"Event: {event}"
