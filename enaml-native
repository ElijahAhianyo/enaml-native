#!/usr/bin/env python2
import sh
import os
import re
import io
import sys
import json
import logging
import json
from glob import glob
from os.path import join, exists, abspath, expanduser, realpath, dirname
from argparse import ArgumentParser, Namespace
from atom.api import Atom, Value, Callable, Dict, List, Unicode, Float, Int, Instance, set_default
from contextlib import contextmanager
from collections import OrderedDict

@contextmanager
def cd(newdir):
    prevdir = os.getcwd()
    os.chdir(os.path.expanduser(newdir))
    try:
        print("Entering into {}".format(newdir))
        yield
        print("Returning to {}".format(prevdir))
    finally:
        os.chdir(prevdir)

#: Hack...
p4a_root = join(dirname(realpath(__file__)),'python-for-android')
p4i_root = join(dirname(realpath(__file__)),'python-for-ios')

sys.path.append(p4a_root)
from pythonforandroid.logger import shprint


class Command(Atom):
    _instance = None
    title = Unicode()
    desc = Unicode()
    help = Unicode()
    ctx = Dict()
    cmds = Dict()
    args = List(tuple)
    parser = Instance(ArgumentParser)

    @classmethod
    def instance(cls):
        return cls._instance

    def run(self, args):
        pass


class Init(Command):
    title = set_default('init')
    help = set_default("Start a new enaml-native project")
    args = set_default([
        ('name',dict(help="Project name")),
        ('bundle_id',dict(help="App bundleId")),
        ('destination', dict(help="Project destination folder")),
        #('-t --template', dict(dest='template', action='store_const',help="Project destination folder")),
    ])

    def run(self, args):
        dest = abspath(args.destination)
        assert not exists(dest), "Error: Destination folder already exists! ({})".format(dest)
        root = dirname(realpath(__file__))

        #: Clean root android project
        with cd(root):
            self.cmds['clean-android'].run()

        #: Make project dir
        os.makedirs(dest)
        with cd(args.destination):
            #: Copy everything
            #: TODO: Should clean build first
            for f in ['android', 'ios', 'src', 'package.json']:
                shprint(sh.cp, '-R', join(root, f), '.')

            #: TODO: Make a readme

            #: Make simlink to enaml-native
            shprint(sh.ln, '-s' ,join(root, 'enaml-native'), 'enaml-native')

            #: Patch package
            with open('package.json') as f:
                pkg = json.load(f,object_pairs_hook=OrderedDict)
            pkg['name'] = args.name
            pkg['version'] = "1.0"
            pkg['bundle_id'] = args.bundle_id
            with open('package.json', 'w') as f:
                json.dump(pkg, f, indent=4)

            #: Patch android
            #: This is a hack haha
            with cd('android/app/'):
                build_gradle = []
                with open("build.gradle") as f:
                    lines = f.read().split("\n")

                for line in lines:
                    if re.match(r'\s+applicationId\s+".+"', line):
                        line = '        applicationId "{}"'.format(args.bundle_id)
                    elif re.match(r'\s+versionCode\s+\d+', line):
                        line = '        versionCode 1'
                    elif re.match(r'\s+versionName\s+".+"', line):
                        line = '        versionName "1.0"'
                    build_gradle.append(line)

                with open("build.gradle", 'w') as f:
                    f.write('\n'.join(build_gradle))

                with cd("src/main/"):
                    for src in ['AndroidManifest.xml',
                                'java/com/enaml/MainActivity.java']:
                        with open(src) as f:
                            data = f.read()
                        with open(src, 'w') as f:
                            f.write(data.replace("com.frmdstryr.enamlnative.demo",args.bundle_id))

                    with cd("res/values/"):
                        with open("strings.xml") as f:
                            data = f.read()
                        with open("strings.xml", "w") as f:
                            f.write(data.replace(
                                '<string name="app_name">Enaml-Native Demo</string>',
                                '<string name="app_name">{}</string>'.format(args.name)
                            ))

        #: Init VCS
        shprint(sh.git,'init')


class CleanPython(Command):
    title = set_default("clean-python")
    help = set_default("Remove python-for-android build and .so libs")
    args = set_default([
        ('-a', dict(action='store_true', help="Clean all")),
        ('--ios',dict(action='store_true', help="Clean iOS only")),
        ('--android',dict(action='store_true', help="Clean android only")),
    ])

    def run(self, args=None):
        ctx = self.ctx

        if args is None or not args.ios:
            with cd(ctx['android']['p4a']):
                if args and args.a:
                    shprint(sh.python, 'p4a.py', 'clean_all')
                    #for arch in ctx['arches']:
                    #    #: Clean so
                    #    shprint(sh.rm, '-R', 'android/app/src/main/libs/{}/'.format(arch))
                else:
                    shprint(sh.python, 'p4a.py', 'clean_dists')
                    shprint(sh.python, 'p4a.py', 'clean_builds')
        if args is None or not args.android:
            if args and args.a: #: Only for clean all, building takes FOREVER
                with cd(ctx['ios']['p4i']):
                    recipes = []
                    for line in sh.python('toolchain.py','status').stdout.split("\n"):
                        print(line)
                        if line.split("-")[-1].strip().lower()=="not built":
                            continue
                        recipes.append(line.split(" ")[0])
                    print("Cleaning {}".format(recipes))
                    for r in recipes:
                        shprint(sh.python,'toolchain.py','clean',r)


class NdkBuild(Command):
    title = set_default("ndk-build")
    help = set_default("Run ndk-build on the android project")

    def run(self, args=None):
        ctx = self.ctx
        ndk_build = sh.Command(join(ctx['android']['ndk'], 'ndk-build'))
        arches = ctx['android']['arches']
        with cd('android/app/src/main/jni'):

            #: Patch Applicaiton.mk to have the correct ABI's
            with open('Application.mk') as f:
                app_mk = f.read()

            #: APP_ABI := armeabi-v7a
            new_mk = []
            for line in app_mk.split("\n"):
                if re.match(r'APP_ABI\s*:=\s*.+', line):
                    line = 'APP_ABI := {}'.format(" ".join(arches))
                new_mk.append(line)

            with open('Application.mk','w') as f:
                f.write("\n".join(new_mk))

            #: Now run nkd-build
            shprint(ndk_build)


class CrossCompile(Command):
    title = set_default("cross-compile")
    help = set_default("Build the python requirements for ios")

    def run(self, args=None):
        import crosscompile
        import logging
        logger = logging.getLogger('p4a')
        logger.setLevel(logging.DEBUG)
        from crosscompile.recipe import Platform,Arch

        b = crosscompile.Builder(
            requirements=[
                crosscompile.recipes.python.Recipe,
            ],
            platforms=[
                    # Platform(name='macOS',arches=[
                    #     Arch(name='macosx.x86_64'),
                    # ]),
                    Platform(name='iOS',arches=[
                        Arch(name='iphonesimulator.x86_64'),
                        Arch(name='iphonesimulator.i386'),
                        Arch(name='iphoneos.armv7'),
                        Arch(name='iphoneos.armv7s'),
                        Arch(name='iphoneos.armv64'),
                    ]),
                    # Platform(name='tvOS',arches=[
                    #     Arch(name='appletvsimulator.x86_64'),
                    #     Arch(name='appletvos.arm64'),
                    # ]),
                    # Platform(name='watchOS',arches=[
                    #     Arch(name='watchsimulator.i386'),
                    #     Arch(name='watchos.armv7k'),
                    # ]),
                ],

        )
        b.build()


class BuildPython(Command):
    """ Builds an enaml-native python app using the following steps:

        For Android:
        1. Runs ndk-build to build JNI modules
        2. Run p4a apk to build python requirements for each arch
            and copies them to the lib a local folder
        3. Pull all so files from site-packages and rename to lib.pkg.to.so
            and place them in the lib/<arch> folder

        For iOS:
        1. Run p4i toolchain build <req>
    """
    title = set_default("build-python")
    help = set_default("Build the python requirements")
    args = set_default([
        ('-d', dict(action='store_true', help="Print full debug log")),
        ('--ios', dict(action='store_true', help="iOS only")),
        ('--android', dict(action='store_true', help="Android only")),
        ('--minify', dict(action='store_true', help="Minify")),
    ])

    def run(self, args=None):
        if args is None or not args.ios:
            self.run_android(args)
        if (args is None or not args.android) and sys.platform == 'darwin':
            self.run_ios(args)

        #: Extra cleanup
        self.cmds['trim-assets'].run(args)

    def run_android(self,args):
        ctx = self.ctx
        env = ctx['android']
        reqs = ",".join(env['dependencies'].keys())

        #: Run ndk build
        #: Um, we're passing args from another command?
        self.cmds['ndk-build'].run(args)

        #: Build for each arch
        for arch in env['arches']:
            cfg = dict(
               arch=arch,
               reqs=reqs,
               bundle_id=ctx['bundle_id']
            )
            cfg.update(env)

            #: Um, we're passing args from another command?
            #: Clean whatever build from previous arch
            self.cmds['clean-python'].run()


            #: Add debug arg if needed
            cfg['debug'] = '--debug ' if (args and args.d) else ''

            #: Add minification
            cfg['minify'] = '--minify ' if (args and args.minify) else ''

            if args and args.d:
                logger = logging.getLogger('p4a')
                logger.level = logging.DEBUG

            with cd(ctx['android']['p4a']):
                shprint(sh.python, *'p4a.py apk --arch={arch} '
                          '--private=../src '
                          '--package={bundle_id} '
                          '--name=EnamlNativeApplication '
                          '--dist-name=enaml-native '
                          '--version=0.1 '
                          '--requirements={reqs} '
                          '--android-api=25 '
                          '--bootstrap=enaml '
                          '--sdk-dir={sdk} '
                          '--ndk-dir={ndk} '
                          '--ndk-platform=21 '
                          '{debug}'
                          '{minify}'
                          '--copy-libs'.format(**cfg).split(' '))

            #: Copy lib folder
            shprint(sh.cp,'-R',
                  expanduser('~/.local/share/python-for-android/dists/enaml-native/libs/{arch}'.format(**cfg)),
                  'android/app/src/main/libs')

            #: Copy modules
            for f in ['modules', 'site-packages']:
                shprint(sh.cp,'-R',
                      expanduser('~/.local/share/python-for-android/dists/enaml-native/python/{}'.format(f)),
                      'android/app/src/main/python/{arch}'.format(**cfg))

            #: Copy ca-cert
            with cd('android/app/src/main/python/{arch}/site-packages/tornado/'.format(**cfg)):
                shprint(sh.cp, '/etc/ssl/certs/ca-certificates.crt', '.')

            #: Where .so files go
            dst = abspath('android/app/src/main/libs/{arch}'.format(**cfg))

            #: Collect all .so files and rename them
            with cd('android/app/src/main/python/{arch}'.format(**cfg)):
                for mod in sh.find('.','-name', '*.so').stdout.strip().split("\n"):
                    #: Strip ./modules or ./site-packages
                    pgk = ".".join(['lib']+mod.split("/")[2:])
                    #: Rename mod.so to pkg.mod.so and move to libs
                    shprint(sh.mv,mod, join(dst, pgk))

    def run_ios(self,args):
        ctx = self.ctx
        env = ctx['ios']
        #: Replace crystax with just python on ios
        reqs = env['dependencies'].keys()

        with cd('python-for-ios'):
            shprint(sh.python, 'toolchain.py', 'build', *reqs)


class TrimAssets(Command):
    title = set_default("trim-assets")
    help = set_default("Trim away unused files from the python install for each arch")
    args = set_default([
        ('--minify', dict(action='store_true', help="Minify using pyminifier")),
    ])

    def run(self, args=None):
        ctx = self.ctx

        #: Clean each arch
        for arch in ctx['android']['arches']:
            with cd('android/app/src/main/python/{arch}/site-packages/'.format(arch=arch)):
                shprint(sh.find,'.','-type','f','-name','*.py','-delete')
                shprint(sh.find,'.','-type','f','-name','*.pyc','-delete')
                #shprint(sh.find,'.','-type','f','-name','*.pyo','-delete') #: Use pyo
                for p in [
                            'enaml/qt',
                            'tornado/test',
                            '*.egg-info',
                            '*.dist-info',
                            'tests',
                            'usr',
                          ]:
                    try:
                        sh.rm('-R', *glob(p))
                    except:
                        pass


class BundleAssets(Command):
    """ This is used by the gradle build to pack python into a zip.
    """
    title = set_default("bundle-assets")
    help = set_default("Creates a python.zip bundle of all py files")
    args = set_default([
        ('-p', dict(action='store_true', help="Create bundle by pulling from device "
                                             "(recommended for release, includes generated cache files)")),
    ])

    def run(self, args=None):
        ctx = self.ctx
        env = ctx['android']
        #: Clean each arch
        for arch in env['arches']:
            #: Remove old
            cfg = dict(arch=arch,bundle_id=ctx['bundle_id'])
            cfg.update(env)
            root = abspath(os.getcwd())
            with cd('android/app/src/main/python/'):
                #: Remove old build
                if os.path.exists('build'):
                    shprint(sh.rm, '-R', 'build')

                if args and args.p:
                    #: Restart as root
                    shprint(sh.adb, 'root')

                    #: Pull assets and cache from device
                    shprint(sh.adb, 'pull',
                            '/data/user/0/{bundle_id}/assets/python/'.format(**cfg),
                            'build')
                else:
                    #: Extract stdlib.zip to build/
                    shprint(sh.mkdir, 'build')

                    #with cd('build'):
                    #    shprint(sh.unzip,
                    #            '{ndk}/sources/python/2.7/libs/{arch}/stdlib.zip'.format(**cfg),
                    #            '-d', 'stdlib')

                    #: Copy site-packages to build/
                    with cd('{arch}/site-packages/'.format(**cfg)):
                        shprint(sh.cp, '-R', '.', '../../build/')

                    #: Copy sources from app source
                    #: TODO, or just let gradle?
                    for src in ctx['sources']:
                        shprint(sh.cp, '-R', join(root, src, '.'), 'build')

                    #: Clean any excluded sources
                    with cd('build'):
                        for pattern in env.get('excluded', []):
                            matches = glob(pattern)
                            if matches:
                                shprint(sh.rm, '-R', *matches)

                #: Remove old
                if os.path.exists('python.zip'):
                    shprint(sh.rm, 'python.zip')

                #: Zip everything and copy to assets arch to build
                with cd('build'):
                    #shprint(sh.zip, '-r', 'android/app/src/main/assets/python/python.zip', '.')
                    shprint(sh.zip, '-r', '../python.zip', '.')


            break #: They should all be the same so stop after the first

        #: Now copy to android assets folder
        shprint(sh.cp,
                'android/app/src/main/python/python.zip',
                'android/app/src/main/assets/python/python.zip')

        #: And wth, just copy it to the ios folder too :)
        shprint(sh.cp,
                'android/app/src/main/python/python.zip',
                'ios/App/Python/python.zip')
        #: Can iOS unpack this??

class AllPython(Command):
    title = set_default("all-python")
    help = set_default("Does clean, build, trim, and bundle")

    def run(self, args=None):
        for cmd in ['build-python',
                    'trim-assets',
                    'bundle-assets']:
            self.cmds[cmd].run()


class BuildAndroid(Command):
    title = set_default("build-android")
    help = set_default("Build android project")
    args = set_default([
        ('-r', dict(action='store_true', help="Release mode")),
    ])

    def run(self, args=None):
        with cd("android"):
            gradlew = sh.Command('./gradlew')
            if args.r:
                shprint(gradlew, 'assembleRelease')
            else:
                shprint(gradlew, 'assembleDebug')


class CleanAndroid(Command):
    title = set_default("clean-android")
    help = set_default("Clean the android project")

    def run(self, args=None):
        with cd('android'):
            gradlew = sh.Command('./gradlew')
            shprint(gradlew, 'clean')


class RunAndroid(Command):
    title = set_default("run-android")
    help = set_default("Build android project, install it, and run")

    def run(self, args=None):
        ctx = self.ctx
        bundle_id = ctx['bundle_id']
        with cd("android"):
            gradlew = sh.Command('./gradlew')

            #: If no devices are connected, start the simulator
            if len(sh.adb('devices').stdout.strip())==1:
                device = sh.emulator('-list-avds').stdout.split("\n")[0]
                shprint(sh.emulator, '-avd', device)

            shprint(gradlew, 'installDebug')
            shprint(sh.adb, 'shell', 'am', 'start', '-n',
                        '{}/com.enaml.MainActivity'.format(bundle_id))


class CleanIOS(Command):
    title = set_default("clean-ios")
    help = set_default("Clean the ios project")

    def run(self, args=None):
        with cd('ios'):
            shprint(sh.xcodebuild, 'clean', '-project', 'App.xcodeproj',
                    '-configuration', 'ReleaseAdhoc', '-alltargets')


class RunIOS(Command):
    title = set_default("run-ios")
    help = set_default("Build and run the ios project")
    # args = set_default([
    #     ('name',dict(help="Project name")),
    #     ('bundle_id',dict(help="App bundleId")),
    #     ('destination', dict(help="Project destination folder")),
    #     #('-t --template', dict(dest='template', action='store_const',help="Project destination folder")),
    # ])

    def run(self, args=None):
        ctx = self.ctx
        env = ctx['ios']
        with cd('ios'):
            shprint(sh.xcrun, 'xcodebuild',
                    '-scheme', env['project'],
                    '-workspace', '{project}.xcworkspace'.format(**env),
                    '-configuration', 'Debug',
                    #'-destination', 'platform=iOS Simulator,name=iPhone 7 Plus,OS=10.2',
                    '-derivedDataPath',
                    'run')
            #shprint(sh.xcrun, 'simctl', 'install', 'booted',
            #        'build/Build/Products/Debug-iphonesimulator/{project}.app'.format(**env))
            shprint(sh.xcrun, 'simctl', 'launch', 'booted', ctx['bundle_id'])


class Server(Command):
    """ Run a dev server to host files. Only view files can be reloaded at the moment. """
    title = set_default("start")
    help = set_default("Start a debug server for serving files to the app")
    #: Dev server index page to render
    index_page = Unicode("enaml-native dev server. "
                         "When you change a source file it pushes to the app.")
    #: Server port
    port = Int(8888)

    #: Time in ms to wait before triggering a reload
    reload_delay = Float(1)
    _reload_count = Int() #: Pending reload requests

    #: Watchdog  observer
    observer = Instance(object)

    #: Watchdog handler
    watcher = Instance(object)

    #: Websocket handler implementation
    handler = Instance(object)

    #: Callable to add a callback from a thread into the event loop
    add_callback = Callable()

    #: Callable to add a callback at some later time
    call_later = Callable()

    def run(self, args=None):
        ctx = self.ctx
        #: Look for tornado or twisted in reqs
        use_twisted = 'twisted' in ctx['android']['dependencies']

        #: Setup observer
        try:
            from watchdog.observers import Observer
            from watchdog.events import LoggingEventHandler
        except ImportError:
            print("Watchdog is required the dev server: pip install watchdog")
            return
        self.observer = Observer()
        server = self

        class AppNotifier(LoggingEventHandler):
            def on_any_event(self, event):
                super(AppNotifier, self).on_any_event(event)
                #: Use add callback to push to event loop thread
                server.add_callback(server.on_file_changed, event)

        with cd('src'):
            print("Watching {}".format(abspath('.')))
            self.watcher = AppNotifier()
            self.observer.schedule(self.watcher, abspath('.'), recursive=True)
            self.observer.start()

            if use_twisted:
                self.run_twisted(args)
            else:
                self.run_tornado(args)

    def run_tornado(self, args):
        """ Tornado dev server implementation """
        server = self
        import tornado.ioloop
        import tornado.web
        import tornado.websocket

        ioloop = tornado.ioloop.IOLoop.current()

        class DevWebSocketHandler(tornado.websocket.WebSocketHandler):
            def open(self):
                super(DevWebSocketHandler, self).open()
                server.on_open(self)

            def on_message(self, message):
                server.on_message(message)

            def on_close(self):
                super(DevWebSocketHandler, self).on_close()
                server.on_close(self)

        class MainHandler(tornado.web.RequestHandler):
            def get(self):
                self.write(server.index_page)

        #: Set the call later method
        server.call_later = ioloop.call_later
        server.add_callback = ioloop.add_callback

        app = tornado.web.Application([
            (r"/", MainHandler),
            (r"/dev", DevWebSocketHandler),
        ])

        app.listen(self.port)
        print("Tornado Dev server started on {}".format(self.port))
        ioloop.start()

    def run_twisted(self, args):
        """ Twisted dev server implementation """
        server = self

        from twisted.internet import reactor
        from twisted.web import resource
        from twisted.web.websocket import WebSocketHandler, WebSocketSite

        class DevWebSocketHandler(WebSocketHandler):
            def connectionMade(self):
                super(DevWebSocketHandler, self).connectionMade()
                server.on_open()

            def frameReceived(self, frame):
                server.on_message(frame)

            def connectionLost(self,reason=None):
                super(DevWebSocketHandler,self).connectionLost(reason)
                server.on_close()
                
            def write_message(self, message):
                self.transport.write(message)

        #: Set the call later method
        server.call_later = reactor.callLater
        server.add_callback = reactor.callFromThread

        class MainHandler(resource.Resource):
            def render_GET(self, req):
                return server.index_page

        root = MainHandler()
        site = WebSocketSite(root)
        site.addHandler("/dev", DevWebSocketHandler)
        reactor.listenTCP(self.port, site)
        print("Twisted Dev server started on {}".format(self.port))
        reactor.run()

    #: ========================================================
    #: Shared protocol implementation
    #: ========================================================
    def on_open(self, handler):
        self._reload_count = 0
        print("Client connected!")
        self.handler = handler

    def on_message(self, msg):
        print(msg)
        
    def send_message(self, msg):
        """ Send a message to the client """
        if self.handler is None:
            return #: Client not connected
        self.handler.write_message(msg)

    def on_close(self, handler):
        print("Client left!")
        self.handler = None

    def on_file_changed(self, event):
        """ """
        print(event)
        self._reload_count +=1
        self.call_later(self.reload_delay, self._trigger_reload)

    def _trigger_reload(self):
        self._reload_count -=1
        if self._reload_count == 0:
            print("Triggering reload")
            #: For now just do the view...
            with open('app/view.enaml') as f:
                data = f.read()
            msg = {
                'type':'reload',
                'files':{
                    'view.enaml':data,
                }
            }
            #buf = io.BytesIO(msgpack.dumps(msg))
            #def read_chunk():
            #    return buf.read(1024)
            #for chunk in iter(read_chunk,''):
            #    print("Send message")
            self.send_message(json.dumps(msg))


def find_commands(cls):
    """ Finds commands by finding the subclasses of Command"""
    cmds = []
    for subclass in cls.__subclasses__():
        cmds.append(subclass)
        cmds.extend(find_commands(subclass))
    return cmds


class EnamlNativeCli(Atom):
    #: Root parser
    parser = Instance(ArgumentParser)

    #: Loaded from package
    ctx = Dict()

    #: Parsed args
    args = Instance(Namespace)

    #: Location of package file
    package = Unicode("package.json")

    #: Commands
    commands = List(Command)

    def _default_commands(self):
        return [c() for c in find_commands(Command)]

    def _default_parser(self):
        parser = ArgumentParser(prog='enaml-native')

        #: Build commands by name
        cmds = {c.title:c for c in self.commands}

        with open(self.package) as f:
            self.ctx = json.load(f)

        #: Hack.. Add p4a to ctx
        global p4a_root
        global p4i_root
        self.ctx['android']['p4a'] = p4a_root
        self.ctx['ios']['p4i'] = p4i_root

        #: Build parser, prepare commands
        subparsers = parser.add_subparsers()
        for c in self.commands:
            p = subparsers.add_parser(c.title, help=c.help)
            c.parser = p
            for (flags,kwargs) in c.args:
                p.add_argument(flags,**kwargs)
            p.set_defaults(cmd=c)
            c.ctx = self.ctx
            c.cmds = cmds

        return parser

    def start(self):
        """ Run the commands"""
        self.args = self.parser.parse_args()

        cmd = self.args.cmd
        try:
            cmd.run(self.args)
        except sh.ErrorReturnCode as e:
            print(e.stderr)
            print(e.stdout)
            raise


def main():
    EnamlNativeCli().start()

if __name__ == '__main__':
    main()
